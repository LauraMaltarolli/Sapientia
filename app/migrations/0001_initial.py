# Generated by Django 5.2.3 on 2025-06-23 22:08

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Dilema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200, verbose_name='Título')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('data_criacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Criação')),
            ],
            options={
                'verbose_name': 'Dilema',
                'verbose_name_plural': 'Dilemas',
            },
        ),
        migrations.CreateModel(
            name='Filosofo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=150, verbose_name='Nome')),
                ('imagem_url', models.URLField(max_length=255, verbose_name='URL da Imagem')),
                ('periodo_historico', models.CharField(max_length=100, verbose_name='Período Histórico')),
                ('citacao_destaque', models.TextField(verbose_name='Citação em Destaque')),
            ],
            options={
                'verbose_name': 'Filósofo',
                'verbose_name_plural': 'Filósofos',
            },
        ),
        migrations.CreateModel(
            name='TeoriaFilosofica',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_teoria', models.CharField(max_length=150, verbose_name='Nome da Teoria')),
                ('descricao', models.TextField(verbose_name='Descrição')),
                ('principais_pensadores', models.CharField(max_length=255, verbose_name='Principais Pensadores')),
            ],
            options={
                'verbose_name': 'Teoria Filosófica',
                'verbose_name_plural': 'Teorias Filosóficas',
            },
        ),
        migrations.CreateModel(
            name='TesteFilosofico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titulo', models.CharField(max_length=200, verbose_name='Título do Teste')),
                ('perguntas', models.JSONField(verbose_name='Perguntas e Opções')),
            ],
            options={
                'verbose_name': 'Teste Filosófico',
                'verbose_name_plural': 'Testes Filosóficos',
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='usuario_set', related_query_name='usuario', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='usuario_set', related_query_name='usuario', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AcaoAnalisada',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao_acao_inicial', models.CharField(max_length=255, verbose_name='Descrição da Ação')),
                ('respostas_do_usuario', models.JSONField(verbose_name='Respostas do Usuário')),
                ('data_analise', models.DateTimeField(auto_now_add=True, verbose_name='Data da Análise')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Ação Analisada',
                'verbose_name_plural': 'Ações Analisadas',
            },
        ),
        migrations.CreateModel(
            name='DilemaCriado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('protagonista', models.CharField(max_length=100, verbose_name='Protagonista')),
                ('objetivo', models.TextField(verbose_name='Objetivo')),
                ('conflito', models.TextField(verbose_name='Conflito')),
                ('opcao1', models.CharField(max_length=255, verbose_name='Opção 1')),
                ('opcao2', models.CharField(max_length=255, verbose_name='Opção 2')),
                ('solucao_do_criador', models.CharField(max_length=255, verbose_name='Solução do Criador')),
                ('justificativa_do_criador', models.TextField(verbose_name='Justificativa do Criador')),
                ('usuario_criador', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário Criador')),
            ],
            options={
                'verbose_name': 'Dilema Criado por Usuário',
                'verbose_name_plural': 'Dilemas Criados por Usuários',
            },
        ),
        migrations.CreateModel(
            name='RespostaDilema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateTimeField(auto_now_add=True, verbose_name='Data de Início da Sessão')),
                ('dilema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.dilema', verbose_name='Dilema')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Sessão de Reflexão',
                'verbose_name_plural': 'Sessões de Reflexão',
            },
        ),
        migrations.CreateModel(
            name='Mensagem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('remetente', models.CharField(choices=[('USUARIO', 'Usuário'), ('IA', 'IA')], max_length=7, verbose_name='Remetente')),
                ('conteudo', models.TextField(verbose_name='Conteúdo')),
                ('timestamp', models.DateTimeField(auto_now_add=True, verbose_name='Timestamp')),
                ('sessao', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mensagens', to='app.respostadilema', verbose_name='Sessão')),
            ],
            options={
                'verbose_name': 'Mensagem',
                'verbose_name_plural': 'Mensagens',
                'ordering': ['timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ResultadoTeste',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resultado', models.CharField(max_length=150, verbose_name='Resultado')),
                ('data_realizacao', models.DateTimeField(auto_now_add=True, verbose_name='Data de Realização')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
                ('teste', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app.testefilosofico', verbose_name='Teste')),
            ],
            options={
                'verbose_name': 'Resultado de Teste',
                'verbose_name_plural': 'Resultados de Testes',
            },
        ),
    ]
